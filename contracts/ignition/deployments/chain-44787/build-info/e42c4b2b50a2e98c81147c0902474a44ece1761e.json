{
  "_format": "hh3-sol-build-info-1",
  "id": "e42c4b2b50a2e98c81147c0902474a44ece1761e",
  "solcVersion": "0.8.30",
  "solcLongVersion": "0.8.30+commit.73712a01",
  "userSourceNameMap": {
    "contracts/Ascent.sol": "project/contracts/Ascent.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "evmVersion": "prague",
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": [
        "project/:@openzeppelin/contracts-upgradeable/=npm/@openzeppelin/contracts-upgradeable@5.3.0/",
        "project/:@openzeppelin/contracts-upgradeable/=npm/@openzeppelin/contracts-upgradeable@5.3.0/"
      ]
    },
    "sources": {
      "npm/@openzeppelin/contracts-upgradeable@5.3.0/access/OwnableUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts-upgradeable@5.3.0/proxy/utils/Initializable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.3.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reinitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Pointer to storage slot. Allows integrators to override it with a custom storage location.\n     *\n     * NOTE: Consider following the ERC-7201 formula to derive storage locations.\n     */\n    function _initializableStorageSlot() internal pure virtual returns (bytes32) {\n        return INITIALIZABLE_STORAGE;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        bytes32 slot = _initializableStorageSlot();\n        assembly {\n            $.slot := slot\n        }\n    }\n}\n"
      },
      "npm/@openzeppelin/contracts-upgradeable@5.3.0/utils/ContextUpgradeable.sol": {
        "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
      },
      "project/contracts/Ascent.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport \"./interfaces/IAscent.sol\";\nimport \"./interfaces/IAscentRegistry.sol\";\nimport \"./helpers/AscentHelper.sol\";\n\n/**\n * @title Ascent\n * @dev A contract that manages a grantor and beneficiaries with a dead man's switch\n */\ncontract Ascent is Initializable, OwnableUpgradeable, IAscent {\n    address[] public beneficiaries;\n    IAscent.CheckInInterval public checkInInterval;\n    uint256 public lastCheckIn;\n    address public registry; // AscentRegistry address\n\n    // Custom errors\n    error HeartbeatExpiredCannotCheckIn();\n    error BeneficiaryAlreadyExists();\n    error BeneficiaryNotFound();\n    error InvalidBeneficiaryAddress();\n\n    /**\n     * @dev Constructor for the implementation contract (disables initializers)\n     */\n    constructor() {\n        _disableInitializers();\n    }\n\n    /**\n     * @dev Initializes the proxy contract (replaces constructor for proxies)\n     * @param _grantor Address of the grantor\n     * @param _beneficiaries Array of beneficiary addresses\n     * @param _checkInInterval Initial check-in interval period\n     */\n    function initialize(\n        address _grantor,\n        address[] memory _beneficiaries,\n        IAscent.CheckInInterval _checkInInterval\n    ) external initializer {\n        __Ownable_init(_grantor);\n        beneficiaries = _beneficiaries;\n        checkInInterval = _checkInInterval;\n        lastCheckIn = block.timestamp;\n        registry = msg.sender; // The registry is the caller\n    }\n\n    /**\n     * @dev Grantor checks in to prove they are still alive\n     * Only the grantor can call this function and only if heartbeat hasn't expired\n     */\n    function checkIn() external override onlyOwner {\n        require(!hasHeartbeatExpired(), HeartbeatExpiredCannotCheckIn());\n\n        lastCheckIn = block.timestamp;\n        emit CheckIn(owner(), block.timestamp);\n    }\n\n    /**\n     * @dev Adds a new beneficiary to the list\n     * Only the owner can call this function\n     * @param _beneficiary Address of the beneficiary to add\n     */\n    function addBeneficiary(address _beneficiary) external onlyOwner {\n        require(_beneficiary != address(0), InvalidBeneficiaryAddress());\n\n        // Check if beneficiary already exists\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\n            if (beneficiaries[i] == _beneficiary) {\n                revert BeneficiaryAlreadyExists();\n            }\n        }\n\n        beneficiaries.push(_beneficiary);\n        \n        // Notify registry about the new beneficiary\n        IAscentRegistry(registry).notifyBeneficiaryAdded(owner(), _beneficiary);\n    }\n\n    /**\n     * @dev Removes a beneficiary from the list\n     * Only the owner can call this function\n     * @param _beneficiary Address of the beneficiary to remove\n     */\n    function removeBeneficiary(address _beneficiary) external onlyOwner {\n        require(_beneficiary != address(0), InvalidBeneficiaryAddress());\n\n        bool found = false;\n        uint256 indexToRemove;\n\n        // Find the beneficiary\n        for (uint256 i = 0; i < beneficiaries.length; i++) {\n            if (beneficiaries[i] == _beneficiary) {\n                found = true;\n                indexToRemove = i;\n                break;\n            }\n        }\n\n        require(found, BeneficiaryNotFound());\n\n        // Remove by swapping with last element and popping\n        beneficiaries[indexToRemove] = beneficiaries[beneficiaries.length - 1];\n        beneficiaries.pop();\n        \n        // Notify registry about the removed beneficiary\n        IAscentRegistry(registry).notifyBeneficiaryRemoved(owner(), _beneficiary);\n    }\n\n    /**\n     * @dev Returns the number of beneficiaries\n     */\n    function getBeneficiaryCount() external view override returns (uint256) {\n        return beneficiaries.length;\n    }\n\n    /**\n     * @dev Returns all beneficiaries\n     */\n    function getBeneficiaries()\n        external\n        view\n        override\n        returns (address[] memory)\n    {\n        return beneficiaries;\n    }\n\n    /**\n     * @dev Returns the deadline for the next check-in\n     */\n    function getNextCheckInDeadline() external view override returns (uint256) {\n        return\n            lastCheckIn +\n            AscentHelper.getCheckInIntervalSeconds(checkInInterval);\n    }\n\n    /**\n     * @dev Returns time remaining until the dead man's switch triggers\n     * @return seconds remaining, or 0 if already triggered\n     */\n    function getTimeRemaining() external view override returns (uint256) {\n        uint256 deadline = lastCheckIn +\n            AscentHelper.getCheckInIntervalSeconds(checkInInterval);\n        if (block.timestamp >= deadline) {\n            return 0;\n        }\n        return deadline - block.timestamp;\n    }\n\n    /**\n     * @dev Checks if the heartbeat has expired (no check-in within required interval)\n     * @return true if the grantor has not checked in within the required interval\n     */\n    function hasHeartbeatExpired() public view override returns (bool) {\n        return\n            block.timestamp >=\n            lastCheckIn +\n                AscentHelper.getCheckInIntervalSeconds(checkInInterval);\n    }\n}\n"
      },
      "project/contracts/helpers/AscentHelper.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"../interfaces/IAscent.sol\";\n\n/**\n * @title AscentHelper\n * @dev Helper library for Ascent contract utility functions\n */\nlibrary AscentHelper {\n    // Custom errors\n    error InvalidCheckInInterval();\n\n    /**\n     * @dev Converts CheckInInterval enum to seconds\n     * @param interval The check-in interval enum value\n     * @return The interval in seconds\n     */\n    function getCheckInIntervalSeconds(IAscent.CheckInInterval interval) internal pure returns (uint256) {\n        if (interval == IAscent.CheckInInterval.SEVEN_DAYS) {\n            return 7 days;\n        } else if (interval == IAscent.CheckInInterval.FOURTEEN_DAYS) {\n            return 14 days;\n        } else if (interval == IAscent.CheckInInterval.THIRTY_DAYS) {\n            return 30 days;\n        } else if (interval == IAscent.CheckInInterval.ONE_EIGHTY_DAYS) {\n            return 180 days;\n        } else if (interval == IAscent.CheckInInterval.THREE_SIXTY_FIVE_DAYS) {\n            return 365 days;\n        } else {\n            revert InvalidCheckInInterval();\n        }\n    }\n}\n"
      },
      "project/contracts/interfaces/IAscent.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\n/**\n * @title IAscent\n * @dev Interface for Ascent contract defining core types and functions\n */\ninterface IAscent {\n    // Enum for check-in intervals\n    enum CheckInInterval {\n        SEVEN_DAYS,     // 7 days\n        FOURTEEN_DAYS,  // 14 days\n        THIRTY_DAYS,    // 30 days\n        ONE_EIGHTY_DAYS, // 180 days\n        THREE_SIXTY_FIVE_DAYS // 365 days\n    }\n\n    // Events\n    event CheckIn(address indexed grantor, uint256 timestamp);\n    event DeadMansSwitchTriggered(uint256 timestamp);\n\n    // Core functions\n    function checkIn() external;\n    function hasHeartbeatExpired() external view returns (bool);\n    function getNextCheckInDeadline() external view returns (uint256);\n    function getTimeRemaining() external view returns (uint256);\n    function getBeneficiaries() external view returns (address[] memory);\n    function getBeneficiaryCount() external view returns (uint256);\n}\n"
      },
      "project/contracts/interfaces/IAscentRegistry.sol": {
        "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.30;\n\nimport \"./IAscent.sol\";\n\n/**\n * @title IAscentRegistry\n * @dev Interface for the AscentRegistry contract\n */\ninterface IAscentRegistry {\n    // Custom errors\n    error ImplementationCannotBeZeroAddress();\n    error OnlyAscentContractCanCall();\n    error InvalidAscentContract();\n    error BeneficiaryMappingAlreadyExists();\n    error BeneficiaryMappingNotFound();\n\n    // Events\n    event AscentCreated(address indexed owner, address ascent);\n    event BeneficiaryAdded(\n        address indexed grantor,\n        address indexed beneficiary,\n        address ascentContract\n    );\n    event BeneficiaryRemoved(\n        address indexed grantor,\n        address indexed beneficiary,\n        address ascentContract\n    );\n\n    // Main function signatures\n    function implementationContract() external view returns (address);\n    \n    function updateImplementation(address _newImplementation) external;\n    \n    function createAscent(\n        address _grantor,\n        address[] memory _beneficiaries,\n        IAscent.CheckInInterval _checkInInterval\n    ) external returns (address ascent);\n    \n    function getAscentsByGrantor(address _grantor) external view returns (address[] memory);\n    \n    function getTotalAscents() external view returns (uint256);\n    \n    function notifyBeneficiaryAdded(address _grantor, address _beneficiary) external;\n    \n    function notifyBeneficiaryRemoved(address _grantor, address _beneficiary) external;\n    \n    function getBeneficiariesByGrantor(address _grantor) external view returns (address[] memory);\n    \n    function getGrantorsByBeneficiary(address _beneficiary) external view returns (address[] memory);\n    \n    function isGrantorBeneficiaryRelationship(\n        address _grantor,\n        address _beneficiary\n    ) external view returns (bool);\n    \n    function isValidAscentContract(address _contract) external view returns (bool);\n}\n"
      }
    }
  }
}